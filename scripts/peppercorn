#!/usr/bin/env python

import os
import sys
import logging
import argparse
import contextlib

# Import global default variables from peppercornenumerator library
from peppercornenumerator import Enumerator, __version__
from peppercornenumerator.input import read_kernel, read_pil, ParseException
from peppercornenumerator.output import write_kernel

from peppercornenumerator.reactions import branch_3way, branch_4way

version = __import__('peppercornenumerator').__version__

class colors:
    RED = '\033[91m'
    YELLOW = '\033[93m'
    GREEN = '\033[92m'
    BLUE = '\033[94m'
    PINK = '\033[95m'
    CYAN = '\033[96m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    colors = [RED, YELLOW, GREEN, CYAN, BLUE, PINK]

    @staticmethod
    def color(string):
        pass

    @staticmethod
    def legend(keys=None):
        if keys is None:
            l = enumerate(colors.colors)
        else:
            l = zip(keys, colors.colors)
        return "\n".join([(c + str(i) + colors.ENDC) for i, c in l])

class ColorFormatter(logging.Formatter):
    def __init__(self, msg, use_color=True):
        logging.Formatter.__init__(self, msg)
        self.use_color = use_color
        self.COLORS = {
            'DEBUG': colors.CYAN,
            'INFO': colors.BLUE,
            'WARNING': colors.YELLOW,
            'ERROR': colors.RED,
            'Exception': colors.PINK,
        }
        self.RESET = colors.ENDC

    def format(self, record):
        levelname = record.levelname
        if self.use_color:
            record.levelname = self.COLORS[levelname] + \
                levelname + self.RESET
        return logging.Formatter.format(self, record)


def add_peppercorn_args(parser):
    output    = parser.add_argument_group('Peppercorn output format')
    semantics = parser.add_argument_group('Peppercorn reaction semantics')
    limits    = parser.add_argument_group('Peppercorn polymerization parameters')
    devel     = parser.add_argument_group('Peppercorn performance analysis')


    parser.add_argument('--version', action='version', version='%(prog)s ' + __version__)
    parser.add_argument( '-v', '--verbose', action='count', default=0,
        help="Print more output (-vv for extra debugging information)")

    parser.add_argument('input_filename', default=None, nargs='?', metavar='<str>',
            help="Path to the input file (same as --infile)")

    output.add_argument('-o', '--output', dest='output_filename', default=None, metavar='<str>',
        help="""Redirect output to a file""")
    output.add_argument( '-c', '--condensed', action='store_true',
        help="Condense reactions into only resting complexes.")

    limits.add_argument( '--max-complex-size', type=int, default=6, metavar='<int>',
        help="""Maximum number of strands allowed in a complex (used to prevent
        polymerization).""")
    limits.add_argument( '--max-complex-count', type=int, default=200, metavar='<int>',
        help="""Maximum number of complexes that may be enumerated before the
        enumerator halts.""")
    limits.add_argument( '--max-reaction-count', type=int, default=1000, metavar='<int>',
        help="Maximum number of reactions that may be enumerated before the enumerator halts.")

    semantics.add_argument( '--release-cutoff-1-1', type=int, default=6, metavar='<int>',
        help="""Maximum number of bases that will be released spontaneously in
        a 1-1 `open` reaction.""")
    semantics.add_argument( '--release-cutoff-1-N', type=int, default=6, metavar='<int>',
        help="""Maximum number of bases that will be released spontaneously in
        a 1-n `open` reaction.""")
    semantics.add_argument( '--release-cutoff', default=None, type=int, metavar='<int>',
        help="""Maximum number of bases that will be released spontaneously in
        an `open` reaction, for either 1-1 or 1-n reactions (overwrites both
        --release-cutoff-1-1 and --release-cutoff-1-n to the same value)""")

    semantics.add_argument( '--no-max-helix', action='store_true', 
        help="Do not apply 'max helix at a time' semantics.")
    semantics.add_argument( '--ignore-branch-3way', action='store_true', dest='ignore_branch_3way',
        help="Ignore 3-way branch migration events during enumeration.")
    semantics.add_argument( '--ignore-branch-4way', action='store_true', dest='ignore_branch_4way',
        help="Ignore 4-way branch migration events during enumeration.")
    semantics.add_argument( '--reject-remote', action='store_true', 
        help="Discard remote toehold mediated 3-way and 4-way branch migration reactions.")

    semantics.add_argument( '--k-slow', dest='k_slow', default=0.0, type=float, metavar='<flt>',
        help="Unimolecular reactions slower than this rate will be discarded.")
    semantics.add_argument( '--k-fast', dest='k_fast', default=0.0, type=float, metavar='<flt>',
        help="Unimolecular reactions slower than this rate will be marked as slow.")

    devel.add_argument( '--interactive', action='store_true', 
        help="Interactive - show new reactions after each step.")
    devel.add_argument( '--bfs-ish', action='store_true', dest='bfs',
        help="When searching for bimolecular reactions, look to the oldest complexes first.")
    devel.add_argument( '--dry-run', action='store_true', 
        help="Dry run: read input, write output. Do not enumerate any reactions.")
    devel.add_argument('--profile', action='store_true', dest='profile',
        help="Enable statistical profiling")

    return


def main(cl_opts):
    logger = logging.getLogger()
    if cl_opts.verbose == 1:
        logger.setLevel(logging.INFO)
    elif cl_opts.verbose == 2:
        logger.setLevel(logging.DEBUG)
    elif cl_opts.verbose >= 3:
        logger.setLevel(logging.NOTSET)

    ch = logging.StreamHandler()

    # logging.Formatter('%(levelname)s - %(message)s')
    formatter = ColorFormatter('%(levelname)s %(message)s', use_color=sys.stdout.isatty())
    ch.setFormatter(formatter)
    logger.addHandler(ch)

    if cl_opts.verbose > 3:
        logging.warning("Verbosity greater than -vvv has no effect")

    title = "Peppercorn Domain-level Reaction Enumerator"
    banner = (colors.BOLD + title + colors.ENDC + " " +
              colors.GREEN + version +
              colors.ENDC if sys.stdout.isatty() else title +
              (" (%s)" % version))
    logging.info(banner)

    systeminput = cl_opts.input_filename
    if not systeminput :
        if sys.stdout.isatty():
            logging.warning("Reading file from STDIN, Ctrl-D to stop")
        systeminput = ''
        for l in sys.stdin:
            systeminput += l

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
    # Load an input parser to generate complexes for enumeration #
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
    try:
        logging.info("Parsing input.")
        complexes, reactions = read_kernel(systeminput, cl_opts.input_filename is not None) 
        logging.info("Parsed input format: kernel")
    except ParseException, e:
        logging.info('Using non-standard input: "{}"'.format(e.line))
        logging.info('                           {} '.format(' ' * (e.col-1) + '^'))
        try :
            complexes, reactions = read_pil(systeminput, cl_opts.input_filename is not None)
            logging.warning("Used deprecated input format: (pil, enum)")
        except ParseException, e:
            logging.error('Cannot parse line {:5d}: "{}"'.format(e.lineno, e.line))
            logging.error('                          {} '.format(' ' * (e.col-1) + '^'))
            raise SystemExit

    enum = Enumerator(complexes.values(), reactions)

    # Print initial complexes
    logging.info("Initial complexes: ")
    for c in enum.initial_complexes:
        logging.info(c.kernel_string)

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
    # Transfer options to enumerator object #
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
    enum.max_complex_size = cl_opts.max_complex_size
    enum.max_complex_count = cl_opts.max_complex_count
    enum.max_reaction_count = cl_opts.max_reaction_count

    enum.k_slow = cl_opts.k_slow
    enum.k_fast = cl_opts.k_fast

    enum.release_cutoff_1_1 = cl_opts.release_cutoff_1_1
    enum.release_cutoff_1_N = cl_opts.release_cutoff_1_N

    if cl_opts.release_cutoff:
        enum.release_cutoff = cl_opts.release_cutoff

    enum.remote_migration = not cl_opts.reject_remote 
    enum.max_helix_migration = not cl_opts.no_max_helix

    enum.DFS = not cl_opts.bfs
    enum.interactive = cl_opts.interactive

    # Modify enumeration events based on command line options.
    if cl_opts.ignore_branch_3way:
        if branch_3way in enum.FAST_REACTIONS:
            enum.FAST_REACTIONS.remove(branch_3way)

    if cl_opts.ignore_branch_4way:
        if branch_4way in enum.FAST_REACTIONS:
            enum.FAST_REACTIONS.remove(branch_4way)

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
    # Run reaction enumeration (or not) #
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
    if cl_opts.dry_run:
        logging.info("Dry run (not enumerating any reactions)... ")
        enum.dry_run()
        logging.info("Done.")
    else:
        logging.info("Enumerating reactions...")
        if cl_opts.interactive:
            logging.info("Interactive mode enabled: Fast and slow reactions " + \
                        "will be printed for each complex as enumerated." + \
                        "Press ^C at any time to terminate and write accumulated" + \
                        "complexes to output.")
        if cl_opts.profile:
            import statprof
            statprof.start()
            try:
                enum.enumerate()
            finally:
                statprof.stop()
                statprof.display()
        else:
            enum.enumerate()
        logging.info("Done.")

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~ #
    # Handle output condensation #
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~ #
    condensed = cl_opts.condensed
    if(condensed):
        logging.info("Output will be condensed to remove transient complexes.")

    if cl_opts.output_filename is None:
        write_kernel(enum, sys.stdout, condensed = condensed)
    else :
        with open(cl_opts.output_filename, 'w') as pil :
            write_kernel(enum, pil, condensed = condensed)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
            formatter_class=argparse.ArgumentDefaultsHelpFormatter,
            description="""Peppercorn: Domain-level nucleic acid reaction
            enumerator. See README.{html, pdf} for usage examples. """)
    add_peppercorn_args(parser)
    args = parser.parse_args()
    main(args)

